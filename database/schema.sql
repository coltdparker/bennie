-- Bennie Database Schema
-- Run this in your Supabase SQL editor

-- Create users table (if it doesn't exist)
CREATE TABLE IF NOT EXISTS public.users (
  id bigint generated by default as identity not null,
  email text not null default ''::text,
  name text not null,
  target_language text not null,
  proficiency_level integer null default 1,
  auth_provider_id text null,
  password_hash text null,
  topics_of_interest text null default ''::text,
  learning_goal text null,
  target_proficiency integer null default 50,
  email_schedule jsonb null,
  is_active boolean null default true,
  is_verified boolean null default false,
  verification_token text null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone null,
  last_login timestamp with time zone null,
  auth_provider public.authproviderenum null,
  constraint users_pkey primary key (id),
  constraint users_email_key unique (email)
) TABLESPACE pg_default;

-- Create email_history table (if it doesn't exist)
CREATE TABLE IF NOT EXISTS public.email_history (
  id bigint generated by default as identity not null,
  user_id bigint null,
  content text null,
  is_from_bennie boolean not null,
  difficulty_level integer null,
  created_at timestamp with time zone not null default now(),
  constraint email_history_pkey primary key (id),
  constraint email_history_user_id_fkey foreign KEY (user_id) references users (id)
) TABLESPACE pg_default;

-- Add indexes if not already present
CREATE INDEX IF NOT EXISTS idx_users_email ON public.users(email);
CREATE INDEX IF NOT EXISTS idx_users_target_language ON public.users(target_language);
CREATE INDEX IF NOT EXISTS idx_users_created_at ON public.users(created_at);
CREATE INDEX IF NOT EXISTS idx_users_is_active ON public.users(is_active);

-- Enable Row Level Security
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.email_history ENABLE ROW LEVEL SECURITY;

-- Service role policies for users table (only create if they don't exist)
DO $$
BEGIN
    -- Users table policies
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'users' AND policyname = 'Service role can insert users') THEN
        CREATE POLICY "Service role can insert users" ON public.users
            FOR INSERT TO service_role
            WITH CHECK (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'users' AND policyname = 'Service role can select users') THEN
        CREATE POLICY "Service role can select users" ON public.users
            FOR SELECT TO service_role
            USING (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'users' AND policyname = 'Service role can update users') THEN
        CREATE POLICY "Service role can update users" ON public.users
            FOR UPDATE TO service_role
            USING (true)
            WITH CHECK (true);
    END IF;
    
    -- Email history table policies
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'email_history' AND policyname = 'Service role can insert email_history') THEN
        CREATE POLICY "Service role can insert email_history" ON public.email_history
            FOR INSERT TO service_role
            WITH CHECK (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'email_history' AND policyname = 'Service role can select email_history') THEN
        CREATE POLICY "Service role can select email_history" ON public.email_history
            FOR SELECT TO service_role
            USING (true);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'email_history' AND policyname = 'Service role can update email_history') THEN
        CREATE POLICY "Service role can update email_history" ON public.email_history
            FOR UPDATE TO service_role
            USING (true)
            WITH CHECK (true);
    END IF;
END $$;

-- Note: This schema assumes the authproviderenum type already exists
-- If it doesn't exist, you may need to create it or remove the auth_provider column 